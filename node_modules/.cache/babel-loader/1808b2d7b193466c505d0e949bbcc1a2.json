{"ast":null,"code":"import _slicedToArray from\"/Users/heeji/Documents/School/Winter 2020/Computation Studio/cast/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React from'react';import ScrollButton from'./ScrollButton';import{Link}from'react-router-dom';function ThoughtForm(){var _React$useState=React.useState(''),_React$useState2=_slicedToArray(_React$useState,2),event=_React$useState2[0],setEvent=_React$useState2[1];var _React$useState3=React.useState(''),_React$useState4=_slicedToArray(_React$useState3,2),action1=_React$useState4[0],setAction1=_React$useState4[1];var _React$useState5=React.useState(''),_React$useState6=_slicedToArray(_React$useState5,2),action2=_React$useState6[0],setAction2=_React$useState6[1];var _React$useState7=React.useState(''),_React$useState8=_slicedToArray(_React$useState7,2),result=_React$useState8[0],setResult=_React$useState8[1];var _React$useState9=React.useState(''),_React$useState10=_slicedToArray(_React$useState9,2),actionThoughts=_React$useState10[0],setactionThoughts=_React$useState10[1];var _React$useState11=React.useState(''),_React$useState12=_slicedToArray(_React$useState11,2),resultThoughts=_React$useState12[0],setresultThoughts=_React$useState12[1];var resultText=result?React.createElement(\"span\",{className:\"result\"},\" \",result,\" \"):React.createElement(\"span\",{className:\"eventPlaceholder\"},\"result\");var action1Text=action1?React.createElement(\"span\",{className:\"action\"},\" \",action1,\" \"):React.createElement(\"span\",{className:\"eventPlaceholder\"},\"firstAction\");var action2Text=action2?React.createElement(\"span\",{className:\"action\"},\" \",action2,\" \"):React.createElement(\"span\",{className:\"eventPlaceholder\"},\"secondAction\");var eventText=event?React.createElement(\"span\",{className:\"event\"},\" \",event,\" \"):React.createElement(\"span\",{className:\"eventPlaceholder\"},\"an upcoming event\");return React.createElement(\"div\",{className:\"wrapper\"},React.createElement(\"main\",null,React.createElement(\"section\",{className:\"page\"},React.createElement(\"p\",{className:\"title\"},\"What are you scared of right now?\"),React.createElement(\"form\",{className:\"thoughtForm\"},React.createElement(\"label\",{htmlFor:\"event\"},\"I'm worried about\"),React.createElement(\"div\",{className:\"flexLine\"},React.createElement(\"input\",{className:\"event\",type:\"text\",id:\"event\",value:event,onChange:function onChange(e){setEvent(e.target.value);},placeholder:\"an upcoming event\"}),React.createElement(\"p\",null,\",\")),React.createElement(\"label\",{htmlFor:\"action1\"},\"Because I'm scared I will\"),React.createElement(\"div\",{className:\"actions\"},React.createElement(\"input\",{className:\"action\",type:\"text\",id:\"action1\",value:action1,onChange:function onChange(e){setAction1(e.target.value);}}),React.createElement(\"label\",{htmlFor:\"action2\"},\"and\"),React.createElement(\"input\",{className:\"action\",type:\"text\",id:\"action2\",value:action2,onChange:function onChange(e){setAction2(e.target.value);}}),React.createElement(\"p\",null,\",\")),React.createElement(\"p\",null,\"resulting \",eventText),React.createElement(\"div\",{className:\"flexLine\"},React.createElement(\"label\",{htmlFor:\"result\"},\"to be\"),React.createElement(\"input\",{className:\"result\",type:\"text\",id:\"result\",value:result,onChange:function onChange(e){setResult(e.target.value);}}),React.createElement(\"p\",null,\".\")),React.createElement(ScrollButton,{enabled:event&&action1&&action2&&result}))),React.createElement(\"section\",{className:\"thoughts page\"},React.createElement(\"form\",null,React.createElement(\"p\",null,action1Text),React.createElement(\"p\",null,action2Text),React.createElement(\"p2\",null,\"Do these happen often in this situation?\"),React.createElement(\"textarea\",{name:\"\",value:actionThoughts,onChange:function onChange(e){return setactionThoughts(e.target.value);},id:\"\",cols:\"30\",rows:\"10\",placeholder:\"Write your thoughts..\"}),React.createElement(ScrollButton,{enabled:actionThoughts}))),React.createElement(\"section\",{className:\"thoughts page\"},React.createElement(\"form\",null,React.createElement(\"p\",null,resultText),React.createElement(\"p2\",null,\"Define \\\"\",resultText,\"\\\". What does it mean in this situation?\"),React.createElement(\"textarea\",{name:\"\",value:resultThoughts,onChange:function onChange(e){return setresultThoughts(e.target.value);},id:\"\",cols:\"30\",rows:\"10\",placeholder:\"Write your thoughts..\"}),React.createElement(ScrollButton,{enabled:resultThoughts}))),React.createElement(\"section\",{className:\"thoughts page\"},React.createElement(\"form\",{action:\"\"},React.createElement(\"p\",null,eventText),React.createElement(\"p2\",null,\"If you can, think back to the times you experienced this.\"),React.createElement(\"p2\",null,\"On average, how long were you affected by them for?\"),React.createElement(\"div\",{className:\"lineFlex timeSelect\"},React.createElement(\"label\",{htmlFor:\"time\",className:\"visually-hidden\"},\"Time Frame\"),React.createElement(\"input\",{type:\"number\",defaultValue:0,id:\"time\",min:0,max:100}),React.createElement(\"label\",{htmlFor:\"counter\",className:\"visually-hidden\"},\"Time Counter\"),React.createElement(\"select\",{name:\"counter\",id:\"counter\"},React.createElement(\"option\",{value:\"Hours\"},\"Hours\"),React.createElement(\"option\",{value:\"Days\"},\"Days\"),React.createElement(\"option\",{value:\"Weeks\"},\"Weeks\"),React.createElement(\"option\",{value:\"Months\"},\"Months\"),React.createElement(\"option\",{value:\"Years\"},\"Years\")),React.createElement(ScrollButton,{enabled:resultThoughts})))),React.createElement(\"section\",{className:\"thoughts page\"},React.createElement(\"p\",{className:\"title\"},\"Let's de-catastrophize.\"),React.createElement(Link,{to:\"/Results\"},\"Continue\"))));}export default ThoughtForm;","map":{"version":3,"sources":["/Users/heeji/Documents/School/Winter 2020/Computation Studio/cast/src/Components/ThoughtForm.js"],"names":["React","ScrollButton","Link","ThoughtForm","useState","event","setEvent","action1","setAction1","action2","setAction2","result","setResult","actionThoughts","setactionThoughts","resultThoughts","setresultThoughts","resultText","action1Text","action2Text","eventText","e","target","value"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ScrollButton from './ScrollButton';\nimport {Link} from 'react-router-dom';\n\n\nfunction ThoughtForm() {\n\nconst [event, setEvent] = React.useState('');\nconst [action1, setAction1] = React.useState('');\nconst [action2, setAction2] = React.useState('');\nconst [result, setResult] = React.useState('');\nconst [actionThoughts, setactionThoughts] = React.useState('');\nconst [resultThoughts, setresultThoughts] = React.useState('');\n\nconst resultText = result ? <span className=\"result\"> {result} </span> :<span className=\"eventPlaceholder\">result</span>\nconst action1Text = action1 ? <span className=\"action\"> {action1} </span> :<span className=\"eventPlaceholder\">firstAction</span>\nconst action2Text = action2 ? <span className=\"action\"> {action2} </span> :<span className=\"eventPlaceholder\">secondAction</span>\nconst eventText = event ? <span className=\"event\"> {event} </span> :<span className=\"eventPlaceholder\">an upcoming event</span>\n\n\n  return (\n    <div className=\"wrapper\">\n      <main>\n        <section className=\"page\">\n          <p className=\"title\">What are you scared of right now?</p>\n  \n          <form className=\"thoughtForm\">\n            <label htmlFor=\"event\">I'm worried about</label>\n  \n            <div className=\"flexLine\">\n              <input className=\"event\"\n                type=\"text\" \n                id=\"event\" \n                value={event} \n                onChange={ (e) => { \n                    setEvent(e.target.value) \n                  }\n                }\n                placeholder=\"an upcoming event\"\n              />\n              <p>,</p>\n            </div>\n  \n            <label htmlFor=\"action1\">Because I'm scared I will</label>\n            <div className=\"actions\">\n              <input className= \"action\"\n                type=\"text\" id=\"action1\" \n                value={action1} \n                onChange={(e) => { \n                    setAction1(e.target.value) }\n              }/>\n              \n              <label htmlFor=\"action2\">and</label>\n              <input className=\"action\"\n              type=\"text\" \n              id=\"action2\" \n              value={action2} \n              onChange={\n                (e) => { setAction2(e.target.value) }\n              }/>\n              <p>,</p>\n            </div>\n  \n            <p>resulting {eventText}</p>\n  \n            <div className=\"flexLine\">\n            <label htmlFor=\"result\">to be</label>\n              <input className=\"result\" \n              type=\"text\" \n              id=\"result\" \n              value={result} \n              onChange={\n                (e) => { setResult(e.target.value) }\n              }/>\n              <p>.</p>\n            </div>\n            <ScrollButton enabled={event && action1 && action2 && result}/>\n            \n  \n          </form>\n\n\n        </section>\n\n        <section className=\"thoughts page\">\n          <form>\n            <p>{action1Text}</p>\n            <p>{action2Text}</p>\n            <p2>Do these happen often in this situation?</p2>\n            <textarea \n            name=\"\" \n            value = {actionThoughts} \n            onChange = {(e) => setactionThoughts(e.target.value)}\n            id=\"\" \n            cols=\"30\" \n            rows=\"10\"\n            placeholder = \"Write your thoughts..\"></textarea>\n            <ScrollButton enabled={actionThoughts}/>\n          </form>\n        </section>\n\n        <section className=\"thoughts page\">\n          <form>\n            <p>{resultText}</p>\n            <p2>Define \"{resultText}\". What does it mean in this situation?</p2>\n            <textarea \n            name=\"\" \n            value = {resultThoughts} \n            onChange = {(e) => setresultThoughts(e.target.value)}\n            id=\"\" \n            cols=\"30\" \n            rows=\"10\"\n            placeholder = \"Write your thoughts..\"></textarea>\n            <ScrollButton enabled={resultThoughts}/>\n          </form>\n        </section>\n\n        <section className=\"thoughts page\">\n          <form action=\"\">\n            <p>{eventText}</p>\n            <p2>If you can, think back to the times you experienced this.</p2>\n            <p2>On average, how long were you affected by them for?</p2>\n\n            <div className=\"lineFlex timeSelect\">\n              <label htmlFor=\"time\" className=\"visually-hidden\">Time Frame</label>\n  \n              <input type=\"number\" defaultValue={0} id=\"time\" min={0} max={100}/>\n  \n              <label htmlFor=\"counter\" className=\"visually-hidden\">Time Counter</label>\n  \n              <select name=\"counter\" id=\"counter\">\n                <option value=\"Hours\">Hours</option>\n                <option value=\"Days\">Days</option>\n                <option value=\"Weeks\">Weeks</option>\n                <option value=\"Months\">Months</option>\n                <option value=\"Years\">Years</option>\n              </select>\n              <ScrollButton enabled={resultThoughts}/>\n            </div>\n          </form>\n        </section>\n\n        <section className=\"thoughts page\">\n            <p className=\"title\">Let's de-catastrophize.</p>\n            <Link to = \"/Results\">Continue</Link>\n        </section>\n\n\n      </main>\n\n    </div>\n  );\n}\n\nexport default ThoughtForm;\n"]},"metadata":{},"sourceType":"module"}